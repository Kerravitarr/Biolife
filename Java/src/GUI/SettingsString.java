/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import Calculations.Configurations;
import Utils.MyMessageFormat;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.EventListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 *Универсальный набор:
 * Подпись, ползунок, ресет и кнопка ввода числового значения
 * @author Kerravitarr
 */
public class SettingsString extends javax.swing.JPanel {
	/**Интерфейс, который срабатывает при обновлении значения*/
	public interface AdjustmentListener extends EventListener {
		public void adjustmentValueChanged(String nVal);
	}
	
	private class RangeFilter extends PlainDocument {			
		public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
			super.insertString(offs, str, a);
			listener.adjustmentValueChanged(text.getText());
		}
	}
	
	/**
	* Создаёт панельку настройки
	* @param nameO имя параметра (по нему берутся навазния)
	* @param defVal значение по умолчанию
	* @param nowVal текущее значение
	* @param list слушатель, который сработает, когда значение изменится
	*/
   public SettingsString(String nameO, String defVal, String nowVal, AdjustmentListener list) {
		initComponents();
		
		listener = e -> {};
		
		label.setText(Configurations.getHProperty(Settings.class, nameO + ".L"));
		label.setToolTipText(Configurations.getHProperty(Settings.class, nameO + ".T"));
		
		text.setDocument(new RangeFilter());
		
		Configurations.setIcon(reset, "reset");
		reset.setPreferredSize(BUT_SIZE);
		reset.addActionListener(e -> setValue(defVal));
		reset.setToolTipText(Configurations.getHProperty(SettingsString.class, "resetSlider"));

		value = nowVal.isEmpty() ? " " : "";
		setValue(nowVal);
		
		listener = list;
	}
	/**Сохранить значение слайдера
	 * @param val 
	 */
	public void setValue(String val) {
		if(!value.equals(val)){
			value = val;
			text.setText(val);
			listener.adjustmentValueChanged(val);
		}
	}
	/**Получить текущее значение слайдера
	 * @return 
	 */
	public String getValue() {
		return value;
	}
	@Override
	public void setEnabled(boolean isEnabled){
		super.setEnabled(isEnabled);
		text.setEnabled(isEnabled);
		reset.setVisible(isEnabled);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        resetAndInsert = new javax.swing.JPanel();
        reset = new javax.swing.JButton();
        text = new javax.swing.JTextField();

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setMaximumSize(new java.awt.Dimension(2147483647, 40));
        setLayout(new java.awt.BorderLayout());

        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("name");
        label.setAlignmentY(0.0F);
        add(label, java.awt.BorderLayout.NORTH);

        resetAndInsert.setLayout(new java.awt.BorderLayout());

        reset.setText("reset");
        resetAndInsert.add(reset, java.awt.BorderLayout.WEST);

        add(resetAndInsert, java.awt.BorderLayout.EAST);

        text.setText("jTextField1");
        add(text, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JButton reset;
    private javax.swing.JPanel resetAndInsert;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables
	
	/**Размер кнопок*/
	private static final Dimension BUT_SIZE = new Dimension(20,15);
	/**Реальное значение*/
	private String value;
	/**Слушатель события, что значение в ячейке изменилось*/
	private AdjustmentListener listener;
}
