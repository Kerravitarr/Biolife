package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.CellObject;
import MapObjects.CellObject.OBJECT;
import MapObjects.Poison;
import Calculations.Configurations;
import Calculations.Point;
import Calculations.Point.DIRECTION;
import static MapObjects.CellObject.OBJECT.ALIVE;

/**
 * –ö—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ –±–æ—Ç–∞, –≤—ã–∏—Å–∫–∏–≤–∞—è —Å–≤–æ—é —Ü–µ–ª—å
 * @author Kerravitarr
 *
 */
public class FindNear extends CommandExplore {
	final int COUNT_FIND = OBJECT.lenght - 1; //–ö—Ä–æ–º–µ

	public FindNear() {super(1,2);}
	
	@Override
	protected int explore(AliveCell cell) {
		return search(cell,OBJECT.values[param(cell,0, COUNT_FIND)]);
	}
	/**
	 * –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏—â–µ—Ç —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
	 * @param cell –∫—Ç–æ –∏—â–µ—Ç
	 * @param type —á—Ç–æ –∏—â–µ—Ç
	 * @return 0, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ä—è–¥–æ–º –∏ 1, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å
	 */
	protected int search(AliveCell cell, OBJECT type) {
		for (int i = 0; i < DIRECTION.size()/2+1; i++) {
			if(i == 0 || i == 4) {
				final var point = nextPoint(cell,relatively(cell,DIRECTION.toEnum(i)));
				if (test(cell,point,type))
					return 1;
			} else {
				final var point1 = nextPoint(cell,relatively(cell,DIRECTION.toEnum(i)));
				if (test(cell,point1,type))
					return 1;
				final var point2 = nextPoint(cell,relatively(cell,DIRECTION.toEnum(-i)));
				if (test(cell,point2,type))
					return 1;
			}
		}
		return 0;
	}
	
	/**
	 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
	 * @param cell –∫—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
	 * @param point –∫–∞–∫—É—é —Ç–æ—á–∫—É –∏—Å—Å–ª–µ–¥—É–µ–º
	 * @param type —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ–º —Ç–∞–º –Ω–∞–π—Ç–∏
	 * @return true, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≤–ø–∞–ª–∏ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é
	 */
	public static boolean test(AliveCell cell, Point point, OBJECT type) {
		var wtype = cell.see(point);
		return wtype == type || wtype.groupLeader == type;
	}

	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna) {
		return OBJECT.values[param(dna,0, COUNT_FIND)].toString();
	}
	
	@Override
	public String getBranch(AliveCell cell, int numBranch, DNA dna){
		return numBranch == 0 ? "üëé" : "üëå";
	};
}
