package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.CellObject;
import MapObjects.CellObject.OBJECT;
import MapObjects.Poison;
import Calculations.Configurations;
import Calculations.Point;
import Calculations.Point.DIRECTION;
import static MapObjects.CellObject.OBJECT.ALIVE;

/**
 * –ö—Ä—É—Ç–∏—Ç—Å—è –≤–æ–∫—Ä—É–≥ –±–æ—Ç–∞, –≤—ã–∏—Å–∫–∏–≤–∞—è —Å–≤–æ—é —Ü–µ–ª—å
 * @author Kerravitarr
 *
 */
public class FindNear extends CommandExplore {

	public FindNear() {super(1,2);}
	
	@Override
	protected int explore(AliveCell cell) {
		return search(cell,OBJECT.values[param(cell,0, OBJECT.lenght - 1)]);
	}

	protected int search(AliveCell cell, OBJECT type) {
		for (int i = 0; i < DIRECTION.size()/2+1; i++) {
			if(i == 0 || i == 4) {
				Point point = nextPoint(cell,relatively(cell,DIRECTION.toEnum(i)));
				if (test(cell,point,type))
					return 1;
			} else {
				int dir = cell.getAge() % 2 == 0 ? i : -i; //–•–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–∫—Ç—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–º–∫–∞
				Point point = nextPoint(cell,relatively(cell,DIRECTION.toEnum(dir)));
				if (test(cell,point,type))
					return 1;
				point = nextPoint(cell,relatively(cell,DIRECTION.toEnum(-dir)));
				if (test(cell,point,type))
					return 1;
			}
		}
		return 0;
	}
	
	/**
	 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
	 * @param cell –∫—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
	 * @param point –∫–∞–∫—É—é —Ç–æ—á–∫—É –∏—Å—Å–ª–µ–¥—É–µ–º
	 * @param type —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ–º —Ç–∞–º –Ω–∞–π—Ç–∏
	 * @return true, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≤–ø–∞–ª–∏ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é
	 */
	public static boolean test(AliveCell cell, Point point, OBJECT type) {
		var wtype = cell.see(point);
		switch (wtype) {
			case FRIEND, ENEMY -> {
				return type == OBJECT.ALIVE || wtype == type;
			}
			case POISON,NOT_POISON -> {
				return type == OBJECT.BANE || wtype == type;
			}
			default -> {return wtype == type;}
		}
	}

	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna) {
		return OBJECT.values[param(dna,0, OBJECT.lenght - 1)].toString();
	}
	
	@Override
	public String getBranch(AliveCell cell, int numBranch, DNA dna){
		return numBranch == 0 ? "üëé" : "üëå";
	};
}
