package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.AliveCellProtorype;
import Utils.MyMessageFormat;

/**
 * –ó–∞–ø–∞—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã –≤ –∂–∏—Ä–∫–∏
 * @author Kerravitarr
 *
 */
public class TankFood extends CommandDo {
	/**–¶–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ê –≤—ã –¥—É–º–∞–ª–∏, –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—Å—ë –±—É–¥–µ—Ç?*/
	private static final int HP_COST = 1;
	/**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∂–µ–ª—É–¥–∫–∞*/
	static final int TANK_SIZE = (int) Math.round(10 * AliveCell.MAX_HP);
	/**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è*/
	private static final MyMessageFormat valueFormatSub = new MyMessageFormat("HP += {0} üõ¢ = {1}");
	private static final MyMessageFormat valueFormatAdd = new MyMessageFormat("HP -= {0} üõ¢ = {1}");
	/**–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–∫–∏ –∏–ª–∏ —É–±–∞–≤–∫–∏*/
	private final boolean isAdd;

	public TankFood(boolean isA) {super(1, isA ? "Add" : "Sub"); isAdd = isA;}

	@Override
	protected void doing(AliveCell cell) {
		cell.addHealth(-HP_COST);
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –∑–∞–ø—Å—Ç–∏
		var val = param(cell, 0, TANK_SIZE);
		if(isAdd)
			add(cell, val);
		else
			sub(cell, val);
	}
	/**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—ë–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	 * @param cell —á—å—ë —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–º–æ—Ç—Ä–∏–º
	 * @return —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –æ–Ω–æ –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å
	 */
	public static int size(AliveCell cell){
		return cell.specMaxVal(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION);
	}
	/**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—ë–º –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, —Å–∫–æ–ª—å–∫–æ –µ—â—ë —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–ª–æ–∂–∏—Ç—å
	 * @param cell —á—å—ë —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–º–æ—Ç—Ä–∏–º
	 * @return —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –æ–Ω–æ –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ
	 */
	public static int leftover(AliveCell cell){
		return size(cell) - cell.getFoodTank();
	}
	
	/**
	 * –ó–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –µ–¥—É –≤ –∂–∏—Ä–∫–∏
	 * –ú–æ–∂–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –µ—Å—Ç—å, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –ø–æ–ª–æ–∂–∏—Ç—å, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
	 * @param cell –∫—Ç–æ –∫–ª–∞–¥—ë—Ç
	 * @param val —Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç—å
	 */
	public static void add(AliveCell cell,int val) {
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
		val = (int) Math.min(val, cell.getHealth() - 2 * AliveCellProtorype.HP_PER_STEP);
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
		val = Math.min(val, leftover(cell));
		if(val <= 0) return;
		cell.addFoodTank(val);
		cell.addHealth(-val);
	}
	/**
	 * –ó–∞–±–∏—Ä–∞–µ—Ç –∏–∑ –∂–µ–ª—É–¥–∫–∞ —Å—Ç–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—Å—è
	 * @param cell –∫—Ç–æ
	 * @param val —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å
	 */
	public static void sub(AliveCell cell, int val) {
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å
		val = Math.min(val, cell.getFoodTank());
		if(val <= 0) return;
		cell.addFoodTank(-val);
		cell.addHealth(val);
	}

	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna){
		return Integer.toString(param(dna, 0, TANK_SIZE));
	};
	
	@Override
	public String value(AliveCell cell) {
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –≤–∑—è—Ç—å
		var val = param(cell, 0, TANK_SIZE);
		if(isAdd) {
			//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
			val = (int) Math.min(cell.getHealth() - 2 * AliveCellProtorype.HP_PER_STEP, val);
			//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
			val = Math.min(val, cell.specMaxVal(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION)- cell.getFoodTank());
			val = Math.max(0, val);
			return valueFormatAdd.format(HP_COST + val, cell.getFoodTank() + val);
		} else {
			//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å
			val = (int) Math.min(val, cell.getFoodTank());
			val = Math.max(0, val);
			return valueFormatSub.format(val - HP_COST, cell.getFoodTank() - val);
		}
	}
}
