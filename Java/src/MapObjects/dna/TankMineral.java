package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.AliveCellProtorype;
import Utils.MyMessageFormat;

/**
 * –ó–∞–ø–∞—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤... –∫–∞–º–Ω–∏ –≤ –ø–æ—á–∫–∞—Ö
 * @author Kerravitarr
 *
 */
public class TankMineral extends CommandDo {
	/**–¶–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ê –≤—ã –¥—É–º–∞–ª–∏, –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—Å—ë –±—É–¥–µ—Ç?*/
	private static final int HP_COST = 1;
	/**–†–∞–∑–º–µ—Ä –∂–µ–ª—É–¥–∫–∞*/
	static final int TANK_SIZE = 10 * AliveCell.MAX_MP;
	/**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è*/
	private static final MyMessageFormat valueFormatAdd = new MyMessageFormat("MP -= {0} üõ¢ = {1}");
	private static final MyMessageFormat valueFormatSub = new MyMessageFormat("MP -= {0} üõ¢ = {1}");
	/**–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–∫–∏ –∏–ª–∏ —É–±–∞–≤–∫–∏*/
	private final boolean isAdd;

	public TankMineral(boolean isA) {super(1, isA ? "Add" : "Sub"); isAdd = isA;}

	@Override
	protected void doing(AliveCell cell) {
		cell.addHealth(-HP_COST);
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –∑–∞–ø—Å—Ç–∏
		var val = param(cell, 0, TANK_SIZE);
		if(isAdd)
			add(cell, val);
		else
			sub(cell, val);
	}
	/**
	 * –ó–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –º–∏–Ω–µ—Ä–∞–ª—ã –≤ –∂–µ–ª—É–¥–æ–∫
	 * @param cell –∫—Ç–æ –∫–ª–∞–¥—ë—Ç
	 * @param val —Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç—å
	 */
	public static void add(AliveCell cell,int val) {
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
		val = (int) Math.min(cell.getMineral(), val);
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
		val = (int) Math.min(val, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION) - cell.getMineralTank());
		if(val <= 0) return;
		cell.addMineralTank(val);
		cell.addMineral(-val);
	}
	/**
	 * –ó–∞–±–∏—Ä–∞–µ—Ç –∏–∑ –∂–µ–ª—É–¥–∫–∞ —Å—Ç–æ–ª—å–∫–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—Å—è
	 * @param cell –∫—Ç–æ
	 * @param val —Å–∫–æ–ª—å–∫–æ
	 */
	public static void sub(AliveCell cell, int val) {
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å
		val = (int) Math.min(val, cell.getMineralTank());
		if(val <= 0) return;
		cell.addMineralTank(-val);
		cell.addMineral(val);
	}

	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna){
		return Integer.toString(param(dna, 0, TANK_SIZE));
	};
	
	@Override
	public String value(AliveCell cell) {
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –≤–∑—è—Ç—å
		var val = param(cell, 0, TANK_SIZE);
		if(isAdd) {
			//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
			val = (int) Math.min(cell.getMineral(), val);
			//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
			val = Math.min(val, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION)- cell.getMineralTank());
			val = Math.max(0, val);
			return valueFormatAdd.format(val, cell.getMineralTank() + val);
		} else {
			//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –≤–∑—è—Ç—å
			val = (int) Math.min(val, cell.getMineralTank());
			val = Math.max(0, val);
			return valueFormatSub.format(val, cell.getMineralTank() - val);
		}
	}
}
