package MapObjects.dna;

import static MapObjects.CellObject.OBJECT.NOT_POISON;

import MapObjects.AliveCell;
import MapObjects.AliveCellProtorype;
import MapObjects.CellObject;
import static MapObjects.CellObject.OBJECT.CLEAN;
import static MapObjects.CellObject.OBJECT.FRIEND;
import static MapObjects.CellObject.OBJECT.ORGANIC;
import static MapObjects.CellObject.OBJECT.OWALL;
import static MapObjects.CellObject.OBJECT.POISON;
import static MapObjects.CellObject.OBJECT.WALL;
import static MapObjects.dna.CommandDNA.nextPoint;
import static MapObjects.dna.CommandDNA.param;
import Utils.MyMessageFormat;
import main.Configurations;
import main.Point;

/**
 * TODO
 * –°—Ä–∞–≤–Ω–∏—Ç—å –≥–µ–Ω
 * –†–æ–¥–∏—Ç—å –ø–æ—Ç–æ–º–∫–∞ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º –î–ù–ö
 * 
 */
/**
 * –ë–∞–∑–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç –î–ù–ö.
 * –í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã "–±–µ—Å–ø–ª–∞—Ç–Ω—ã", —Ç–∞–∫ –∫–∞–∫ –≤–∏—Ä—Å–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–º–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ —Å–≤–æ–∏—Ö —Ç–µ–ª–æ–¥–≤–∏–∂–µ–Ω–∏–π
 * @author Kerravitarr
 *
 */
public class DNABreak extends CommandDo {
	/**–¶–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Ö–æ–¥, —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è*/
	private final int HP_COST = 100;
	private final MyMessageFormat oneParam0ormat = new MyMessageFormat("üîçCMD = {0}");
	private final MyMessageFormat oneParam1ormat = new MyMessageFormat("CMD = {0}");
	private final MyMessageFormat manyParam1ormat = new MyMessageFormat("L = {0}");
	private final MyMessageFormat manyParam2ormat = new MyMessageFormat("PC -= {0}");
	
	private final String manyValueFormatS = Configurations.getProperty(Destroy.class,  "Shot");
	private final String manyValueFormatL = Configurations.getProperty(Destroy.class,  "Long");
	private final MyMessageFormat manyValueFormat = new MyMessageFormat("HP -= {0}");
	
	/**–û–ø–µ—Ä–∞—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏? –ò–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*/
	private final boolean isInsert;
	/**–û–¥–∏–Ω–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞? –ò–ª–∏ –¥–ª—è —Ä—è–¥–∞ —á–∏—Å–µ–ª*/
	private final boolean isOne;
	/**
	 * –ö–æ–Ω—Å—Ç—É—Ä–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
	 * @param isO - –æ–¥–∏–Ω–æ–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è
	 * @param isIns - –≤—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
	 */
	public DNABreak(boolean isO, boolean isIns) {
		super(isO ? 2 : 3, isO && isIns ? "OneInsert" : (!isO && isIns ? "ManyInsert" : (isO && !isIns ? "OneUpdate" : "ManyUpdate")));
		isInterrupt = true;
		isOne = isO;
		isInsert = isIns;
	}
	
	@Override
	protected void doing(AliveCell cell) {
		CellObject.OBJECT see = cell.see(cell.direction);
		switch (see) {
			case ENEMY, FRIEND -> {
				Point point = nextPoint(cell,cell.direction);
				AliveCell bot = (AliveCell) Configurations.world.get(point);
				if(isOne){
					int cmdStart = param(cell,0); // –ü–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ –≥–µ–Ω–∞ –º—ã —É—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ª—è–Ω–∫—É
					int mc = param(cell,1); //–ö–∞–∫–æ–π –≥–µ–Ω –º–µ–Ω—è–µ–º
					if(isInsert)
						insertCmd(cell,bot, true,cmdStart,mc);
					else
						updateCmd(cell,bot, true,cmdStart,mc);
					//–¢–µ—Ä—è–µ—Ç –±–æ—Ç –Ω–∞ —ç—Ç–æ–º –∫–æ–ª–æ—Å–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
					cell.addHealth( - HP_COST);
				} else {
					int cmdStart = param(cell,0); // –ü–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ –≥–µ–Ω–∞ –º—ã —É—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ª—è–Ω–∫—É
					int length_DNA = param(cell,1, cell.getDna().size - 1) + 1; // –°–∫–æ–ª—å–∫–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
					int pref = param(cell,2); //–°–∫–æ–ª—å–∫–æ –≥–µ–Ω–æ–≤ –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞–∑–∞–¥
					int[] cmds = new int[length_DNA];
					var dna = cell.getDna();
					for(int i = 0 ; i < length_DNA ; i++){
						cmds[i] = dna.get(0, dna.getPC() - pref + i);
					}
					if(isInsert)
						insertCmds(cell,bot, true,cmdStart,cmds);
					else
						updateCmds(cell,bot, true,cmdStart,cmds);
					//–ú—ã —Å–¥–µ–ª–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–∫—Ä—É–≥–ª—è–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º
					cell.destroy();
				}
			}
			case NOT_POISON, ORGANIC, POISON, WALL, CLEAN, OWALL -> cell.getDna().interrupt(cell, see.nextCMD);
			case BOT -> throw new IllegalArgumentException("Unexpected value: " + see);
		}
	}
	
	/**
	 * –ò—â–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –î–ù–ö —Å–ª–µ–¥—É—é—â—É—é —Å—Ä–∞–∑—É –∑–∞ cmd
	 * @param dna –î–ù–ö –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º
	 * @param cmd –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –∏—â–µ–º
	 * @return –∏–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–ù–ö[dna.getPC() + find(cmd) + 1];
	 *			–∏–ª–∏ -1, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
	 */
	public static int findPos(DNA dna, int cmd){
		for (var i = 0; i < dna.size; i++) {
			if (dna.get(dna.getPC(), i) == cmd) {
				return (dna.getPC() + i + 1) % dna.size;
			}
		}
		return -1;
	}
	/**–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏–µ target –∑–∞ —Å—á—ë—Ç who*/
	private void updateGeneration(AliveCell who, AliveCell target){
			target.setGeneration(target.getGeneration() + 1);
			target.evolutionNode = target.evolutionNode.newNode(target, who.getStepCount());
	}
	
	/**
	 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –î–ù–ö –∂–µ—Ä—Ç–≤—ã
	 * @param who –∫—Ç–æ –ª–æ–º–∞–µ—Ç
	 * @param target –∫–æ–º—É –ª–æ–º–∞–µ—Ç
	 * @param breakWall —Å–ª–æ–º–∞—Ç—å-–ª–∏ —Å—Ç–µ–Ω—É –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
	 * @param cmdStart –ø–æ—Å–ª–µ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
	 * @param comand –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—Å—Ç–∞–≤–∏—Ç—å
	 */
	protected void insertCmd(AliveCell who,AliveCell target, boolean breakWall, int cmdStart, int comand) {
		insertCmds(who,target,breakWall,cmdStart,new int[]{comand});
	}
	/**
	 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –î–ù–ö –∂–µ—Ä—Ç–≤—ã
	 * @param who –∫—Ç–æ –ª–æ–º–∞–µ—Ç
	 * @param target –∫–æ–º—É –ª–æ–º–∞–µ—Ç
	 * @param breakWall —Å–ª–æ–º–∞—Ç—å-–ª–∏ —Å—Ç–µ–Ω—É –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
	 * @param cmdStart –ø–æ—Å–ª–µ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
	 * @param comands —Å–ø–∏—Å–æ–∫ –≤—Å—Ç–∞–≤–ª—è–µ—ã—Ö –∫–æ–º–∞–Ω–¥
	 */
	protected void insertCmds(AliveCell who,AliveCell target, boolean breakWall, int cmdStart, int[] comands) {
		if (breakWall && target.getDNA_wall() > 0) {
			target.setDNA_wall(target.getDNA_wall()-1);
		} else {
			var dna = target.getDna();
			var index = findPos(dna,cmdStart);
			if(index == -1 || dna.size + comands.length >= AliveCellProtorype.MAX_MINDE_SIZE) return;
			dna = dna.doubling(index, comands.length);
			for(var iCmd = 0 ; iCmd < comands.length ; iCmd++)
				dna.criticalUpdate(index - dna.getPC() + iCmd, comands[iCmd]);
			target.setDna(dna);
			updateGeneration(target,who);
		}
	}
	/**
	 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –î–ù–ö –∂–µ—Ä—Ç–≤—ã
	 * @param who –∫—Ç–æ –ª–æ–º–∞–µ—Ç
	 * @param target –∫–æ–º—É –ª–æ–º–∞–µ—Ç
	 * @param breakWall —Å–ª–æ–º–∞—Ç—å-–ª–∏ —Å—Ç–µ–Ω—É –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
	 * @param cmdStart –ø–æ—Å–ª–µ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
	 * @param comand –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—Å—Ç–∞–≤–∏—Ç—å
	 */
	protected void updateCmd(AliveCell who,AliveCell target, boolean breakWall, int cmdStart, int comand) {
		updateCmds(who,target,breakWall,cmdStart,new int[]{comand});
	}
	/**
	 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –î–ù–ö –∂–µ—Ä—Ç–≤—ã
	 * @param who –∫—Ç–æ –ª–æ–º–∞–µ—Ç
	 * @param target –∫–æ–º—É –ª–æ–º–∞–µ—Ç
	 * @param breakWall —Å–ª–æ–º–∞—Ç—å-–ª–∏ —Å—Ç–µ–Ω—É –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
	 * @param cmdStart –ø–æ—Å–ª–µ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
	 * @param comands –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
	 */
	protected void updateCmds(AliveCell who,AliveCell target, boolean breakWall, int cmdStart, int[] comands) {
		if (breakWall && target.getDNA_wall() > 0) {
			target.setDNA_wall(target.getDNA_wall()-1);
		} else {
			var dna = target.getDna();
			var index = findPos(dna,cmdStart);
			if(index == -1) return;
			dna = dna.update(index - dna.getPC(), comands[0]); //–°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é –î–ù–ö
			for(var iCmd = 0 ; iCmd < comands.length ; iCmd++)
				dna.criticalUpdate(index - dna.getPC() + iCmd, comands[iCmd]);
			target.setDna(dna);
			updateGeneration(target,who);
		}
	}

	
	@Override
	public int getInterrupt(AliveCell cell, DNA dna){
		var see = cell.see(cell.direction);
		if (see == CLEAN || see == NOT_POISON || see == ORGANIC || see == POISON || see == WALL || see == OWALL)
			return see.nextCMD;
		else
			return -1;
	}
	
	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna) {
		if(isOne){
			return switch (numParam) {
				case 0 -> oneParam0ormat.format(CommandList.list[param(dna, numParam)]);
				case 1 -> oneParam1ormat.format(CommandList.list[param(dna, numParam)]);
				default-> super.getParam(cell, numParam, dna);
			};
		} else {
			return switch (numParam) {
				case 0 -> oneParam0ormat.format(CommandList.list[param(dna, numParam)]);
				case 1 -> manyParam1ormat.format(param(dna,0, dna.size - 1) + 1);
				case 2 -> manyParam2ormat.format(param(dna,0, dna.size));
				default-> super.getParam(cell, numParam, dna);
			};
		}
	}
	
	@Override
	public String value(AliveCell cell, DNA dna) {
		if (isOne) {
			return manyValueFormat.format(HP_COST);
		} else {
			return isFullMod() ? manyValueFormatL : manyValueFormatS;
		}
	}
}
