package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.CellObject;
import main.Configurations;
import main.Point;
import main.Point.DIRECTION;

/**
 * –ö—É—à–∞–µ—Ç –∫–ª–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–µ–π –∂–µ—Ä—Ç–≤–æ–π
 * @author Kerravitarr
 *
 */
public class EatA extends CommandDo {
	/**–¶–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Ö–æ–¥*/
	private final int HP_COST = 4;

	public EatA() {this("üç¥ –ê","–°—ä–µ—Å—Ç—å –ê");};
	protected EatA(String shotName, String longName) {super(1,shotName, longName); isInterrupt = true;}
	
	@Override
	protected void doing(AliveCell cell) {
		eat(cell,DIRECTION.toEnum(param(cell,0, DIRECTION.size())));
	}
	/**
	 * –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ—É–∫–Ω—Ü–∏—è –ø–æ–µ–¥–∞–Ω–∏—è
	 * @param cell - –∫—Ç–æ –µ—Å—Ç
	 * @param direction - –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—É—à–∞–µ—Ç
	 */
	protected void eat(AliveCell cell,DIRECTION direction) {
		cell.addHealth(-HP_COST); // –±–æ—Ç —Ç–µ—Ä—è–µ—Ç –Ω–∞ —ç—Ç–æ–º 1 —ç–Ω–µ—Ä–≥–∏—é
		var see = cell.see(direction);
		switch (see) {
		case ORGANIC: {
			Point point = nextPoint(cell,direction);
			CellObject target = Configurations.world.get(point);
			cell.addHealth(Math.abs(target.getHealth()));    //–∑–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
			cell.goRed((int) target.getHealth());           // –±–æ—Ç –ø–æ–∫—Ä–∞—Å–Ω–µ–ª
            target.remove_NE();
		} return;
		case ENEMY:
		case FRIEND:{
			//--------- –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤–ø–µ—Ä–µ–¥–∏ –∂–∏–≤–æ–π –±–æ—Ç -------------------
			Point point = nextPoint(cell,direction);
			AliveCell target = (AliveCell) Configurations.world.get(point);
			
	        var min0 = cell.getMineral();  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –Ω–∞—Å
	        var min1 = target.getMineral();  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–µ–¥–∞
	        var hl = target.getHealth();  // –æ–ø—Ä–µ–¥–µ–ª–∏–º —ç–Ω–µ—Ä–≥–∏—é —É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–µ–¥–∞
	        // –µ—Å–ª–∏ —É –±–æ—Ç–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –±–æ–ª—å—à–µ
	        if (min0 >= min1) {
	        	cell.setMineral(min0 - min1); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –±–æ—Ç–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –∂–µ—Ä—Ç–≤—ã
	            // —Ç–∏–ø–∞, —Å—Ç–µ—Å–∞–ª —Å–≤–æ–∏ –∑—É–±—ã –æ –ø–∞–Ω—Ü–∏—Ä—å –∂–µ—Ä—Ç–≤—ã
	            target.remove_NE(); // —É–¥–∞–ª—è–µ–º –∂–µ—Ä—Ç–≤—É –∏–∑ —Å–ø–∏—Å–∫–æ–≤
	            double cl = hl / 2;           // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ —É –±–æ—Ç–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ (–ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –∂–µ—Ä—Ç–≤—ã)
	            cell.addHealth(cl);
	            cell.goRed((int) cl);                    // –±–æ—Ç –∫—Ä–∞—Å–Ω–µ–µ—Ç
	            return;
	        } else {
	        	//–µ—Å–ª–∏ —É –∂–µ—Ä—Ç–≤—ã –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –±–æ–ª—å—à–µ ----------------------
	            cell.setMineral(0);  // —Ç–æ –±–æ—Ç –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª –≤—Å–µ —Å–≤–æ–∏ –º–∏–Ω–µ—Ä–∞–ª—ã –Ω–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
	            min1 = min1 - min0;       // —É –∂–µ—Ä—Ç–≤—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —Ç–æ–∂–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
	            target.setMineral(min1);       // –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª–∏ –º–∏–Ω–µ—Ä–∞–ª—ã –∂–µ—Ä—Ç–≤–µ 
	            //------ –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –∂–µ—Ä—Ç–≤—ã  ------
	            //------ —Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –ø—Ä–æ–ª–∞–º—ã–≤–∞–µ–º –º–∏–Ω–µ—Ä–∞–ª—ã ---------------------------
	            if (cell.getHealth() >= 2 * min1) {
		            target.remove_NE(); // —É–¥–∞–ª—è–µ–º –∂–µ—Ä—Ç–≤—É –∏–∑ —Å–ø–∏—Å–∫–æ–≤
		            double cl = Math.max(0,(hl / 2) - 2 * min1); // –≤—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç
	            	cell.addHealth(cl);
	                cell.goRed((int) cl);                   // –±–æ—Ç –∫—Ä–∞—Å–Ω–µ–µ—Ç
	                return;                             // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 5
	            } else {
		            //--- –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –º–µ–Ω—å—à–µ, —á–µ–º (–º–∏–Ω–µ—Ä–∞–ª–æ–≤ —É –∂–µ—Ä—Ç–≤—ã)*2, —Ç–æ –±–æ—Ç –ø–æ–≥–∏–±–∞–µ—Ç –æ—Ç –∂–µ—Ä—Ç–≤—ã
	            	target.setMineral(min1 - Math.round(cell.getHealth() / 2));  // —É –∂–µ—Ä—Ç–≤—ã –º–∏–Ω–µ—Ä–∞–ª—ã –∏—Å—Ç—Ä–∞—á–µ–Ω–Ω—ã
	            	cell.setHealth(0);  // –∑–¥–æ—Ä–æ–≤—å–µ —É—Ö–æ–¥–∏—Ç –≤ –Ω–æ–ª—å
		            return;
	            }
	        }
		}
		case CLEAN:
		case NOT_POISON:
		case POISON:
		case WALL:
			cell.getDna().interrupt(cell, see.nextCMD);
			break;
		default:
			throw new IllegalArgumentException("Unexpected value: " + see);
	}
	}
}
