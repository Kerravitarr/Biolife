package MapObjects.dna;

import MapObjects.AliveCell;
import MapObjects.AliveCellProtorype;
import Utils.MyMessageFormat;

/**
 * –ó–∞–ø–∞—Å—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –µ–¥—ã –≤ –∂–∏—Ä–∫–∏
 * @author Kerravitarr
 *
 */
public class AddTankFood extends CommandDo {
	/**–¶–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ê –≤—ã –¥—É–º–∞–ª–∏, –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—Å—ë –±—É–¥–µ—Ç?*/
	private static final int HP_COST = 1;
	/**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∂–µ–ª—É–¥–∫–∞*/
	static final int TANK_SIZE = 10 * AliveCell.MAX_HP;
	private static final MyMessageFormat valueFormat = new MyMessageFormat("HP -= {0} üõ¢ = {1}");

	public AddTankFood() {super(1);}

	@Override
	protected void doing(AliveCell cell) {
		cell.addHealth(-HP_COST);
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –∑–∞–ø—Å—Ç–∏
		var val = param(cell, 0, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION));
		addFood(cell, val);
	}
	
	/**
	 * –ó–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –µ–¥—É –≤ –∂–µ–ª—É–¥–æ–∫
	 * @param cell –∫—Ç–æ –∫–ª–∞–¥—ë—Ç
	 * @param val —Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç—å
	 */
	public static void addFood(AliveCell cell,int val) {
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
		val = (int) Math.min(cell.getHealth() - 2 * AliveCellProtorype.HP_PER_STEP, val);
		if(val <= 0) return;
		//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
		val = Math.min(val, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION) - cell.getFoodTank());
		if(val <= 0) return;
		cell.addFoodTank(val);
		cell.addHealth(-val);
	}

	@Override
	public String getParam(AliveCell cell, int numParam, DNA dna){
		return Integer.toString(param(dna, 0, cell.specMax(10 * AliveCell.MAX_HP,AliveCellProtorype.Specialization.TYPE.ACCUMULATION)));
	};
	
	@Override
	public String value(AliveCell cell) {
		//–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –∑–∞–ø—Å—Ç–∏
		var val = param(cell, 0, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION));
		//–°–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º –∑–∞–ø–∞—Å—Ç–∏
		val = (int) Math.min(cell.getHealth() - 2 * AliveCellProtorype.HP_PER_STEP, val);
		//–°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å
		val = Math.min(val, cell.specMax(TANK_SIZE,AliveCellProtorype.Specialization.TYPE.ACCUMULATION)- cell.getFoodTank());
		val = Math.max(0, val);
		return valueFormat.format(HP_COST + val, cell.getFoodTank() + val);
	}
}
